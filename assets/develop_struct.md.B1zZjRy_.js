import{_ as n,c as a,a2 as p,o as e}from"./chunks/framework.BQmytedh.js";const k=JSON.parse('{"title":"仓库结构","description":"","frontmatter":{},"headers":[],"relativePath":"develop/struct.md","filePath":"develop/struct.md","lastUpdated":1732432820000}'),l={name:"develop/struct.md"};function c(i,s,t,o,r,d){return e(),a("div",null,s[0]||(s[0]=[p(`<h1 id="仓库结构" tabindex="-1">仓库结构 <a class="header-anchor" href="#仓库结构" aria-label="Permalink to &quot;仓库结构&quot;">​</a></h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.</span></span>
<span class="line"><span>├── .devcontainer</span></span>
<span class="line"><span>│   ├── Dockerfile // 用于启动开发容器或部署环境的 Dockerfile</span></span>
<span class="line"><span>│   ├── Dockerfile.l4t.35 // 用于启动部署环境的 Dockerfiles</span></span>
<span class="line"><span>│   ├── devcontainer.json</span></span>
<span class="line"><span>│   ├── docker-compose.gpu-disable.yaml</span></span>
<span class="line"><span>│   ├── docker-compose.gpu-enable.yaml</span></span>
<span class="line"><span>│   ├── docker-compose.gpu-tegra.yaml</span></span>
<span class="line"><span>│   ├── docker-compose.gpu.yaml</span></span>
<span class="line"><span>│   ├── docker-compose.os-unix.yaml</span></span>
<span class="line"><span>│   ├── docker-compose.os-win.yaml</span></span>
<span class="line"><span>│   ├── docker-compose.os.yaml</span></span>
<span class="line"><span>│   ├── docker-compose.yaml</span></span>
<span class="line"><span>│   └── setup_container.sh // 根据系统修改 docker-compose.yaml 具体配置</span></span>
<span class="line"><span>├── .dockerignore</span></span>
<span class="line"><span>├── .env</span></span>
<span class="line"><span>├── .git</span></span>
<span class="line"><span>├── .gitattributes</span></span>
<span class="line"><span>├── .gitignore</span></span>
<span class="line"><span>├── .gitmodules</span></span>
<span class="line"><span>├── .vscode</span></span>
<span class="line"><span>│   ├── c_cpp_properties.json</span></span>
<span class="line"><span>│   ├── launch.json</span></span>
<span class="line"><span>│   ├── settings.json</span></span>
<span class="line"><span>│   └── tasks.json // vscode tasks，包括 build、clean、test 等常用操作，你可以在此添加自定义任务</span></span>
<span class="line"><span>├── .workspace</span></span>
<span class="line"><span>│   ├── dockerfiles // 存放第二层 Dockerfile, 用于安装依赖</span></span>
<span class="line"><span>│   │   ├── deploy.Dockerfile</span></span>
<span class="line"><span>│   │   ├── deploy.l4t.35.Dockerfile</span></span>
<span class="line"><span>│   │   ├── devel.Dockerfile</span></span>
<span class="line"><span>│   │   └── devel.l4t.35.Dockerfile</span></span>
<span class="line"><span>│   ├── host</span></span>
<span class="line"><span>│   │   ├── setup_jetson_clock.bash</span></span>
<span class="line"><span>│   │   ├── setup_udev.sh</span></span>
<span class="line"><span>│   │   └── udev</span></span>
<span class="line"><span>│   ├── requirements // 你可以在此添加依赖</span></span>
<span class="line"><span>│   │   ├── apt_packages.txt</span></span>
<span class="line"><span>│   │   ├── pip_requirements.txt</span></span>
<span class="line"><span>│   │   └── ros_packages.txt</span></span>
<span class="line"><span>│   ├── scripts // 用到的脚本</span></span>
<span class="line"><span>│   │   ├── deployment_ros_entrypoint.sh</span></span>
<span class="line"><span>│   │   └── install_ros_packages.bash</span></span>
<span class="line"><span>│   └── tasks // Tasks 用到的脚本</span></span>
<span class="line"><span>│       ├── build.sh</span></span>
<span class="line"><span>│       ├── setup.sh</span></span>
<span class="line"><span>│       ├── sync_upstream.sh</span></span>
<span class="line"><span>│       └── test.sh</span></span>
<span class="line"><span>├── LICENSE</span></span>
<span class="line"><span>├── README.md</span></span>
<span class="line"><span>├── data</span></span>
<span class="line"><span>│   └── .gitkeep</span></span>
<span class="line"><span>└── src // 存放主要代码，包括 ros2 各种 node 和驱动</span></span>
<span class="line"><span>    ├── hik_camera</span></span>
<span class="line"><span>    ├── opt_camera</span></span>
<span class="line"><span>    └── ros_tcp_endpoint</span></span></code></pre></div>`,2)]))}const u=n(l,[["render",c]]);export{k as __pageData,u as default};
